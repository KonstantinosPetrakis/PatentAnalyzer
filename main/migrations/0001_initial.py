# Generated by Django 4.1.7 on 2023-03-14 18:28

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CPCClass',
            fields=[
                ('_class', models.CharField(help_text="The class of the CPC classification. E.g 'A63'", max_length=100, primary_key=True, serialize=False, verbose_name='class')),
                ('title', models.TextField(help_text="The title of the class. E.g 'sports; games; amusements'")),
            ],
        ),
        migrations.CreateModel(
            name='CPCSection',
            fields=[
                ('section', models.CharField(help_text="The section of the CPC classification. E.g 'A'", max_length=100, primary_key=True, serialize=False)),
                ('title', models.TextField(help_text="The title of the section. E.g 'Human Necessities'")),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_code', models.CharField(help_text='The country of the location.', max_length=100, null=True)),
                ('state', models.CharField(help_text='The state of the location.', max_length=100, null=True)),
                ('city', models.CharField(help_text='The city of the location.', max_length=100, null=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(help_text='The point (lat and lon) of the location.', null=True, srid=4326)),
                ('county_fips', models.IntegerField(help_text='The FIPS code of the county.', null=True)),
                ('state_fips', models.IntegerField(help_text='The FIPS code of the state.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('office', models.CharField(choices=[('USPTO', 'USPTO')], help_text='The office that granted the patent.', max_length=100)),
                ('office_patent_id', models.CharField(help_text="The ID of the patent in the office's database.", max_length=100)),
                ('type', models.CharField(blank=True, choices=[('utility', 'Utility'), ('design', 'Design'), ('plant', 'Plant'), ('reissue', 'Reissue')], help_text='<b> Parent types </b>:\n<ul>\n    <li> \n        <b>Utility</b>: \n        A patent for a new and useful process, machine, manufacture, or\n        composition of matter, or a new and useful improvement thereof. This is the most\n        common type of patent and what typically comes to mind when people think of a patent.\n    </li>\n    <li>\n        <b>Design</b>: \n        A patent for a new, original, and ornamental design for a product.\n    </li>\n    <li>\n        <b>Plant</b>:\n        A patent for a new and distinct variety of plant.\n    </li> \n    <li>\n        <b>Reissue</b>: \n        A patent for a new and useful process, machine, manufacture, or composition\n        of matter, or a new and useful improvement thereof that has been reissued.\n    </li>\n</ul>', max_length=100, null=True)),
                ('application_filed_date', models.DateField(help_text='The date when the application was filed.', null=True)),
                ('granted_date', models.DateField(help_text='The date when the patent was granted.')),
                ('title', models.TextField(help_text='The title of the patent.')),
                ('abstract', models.TextField(blank=True, help_text='The abstract text of the patent.', null=True)),
                ('claims_count', models.IntegerField(help_text='The number of claims in the patent.')),
                ('figures_count', models.IntegerField(help_text='The number of figures included with the patent.', null=True)),
                ('sheets_count', models.IntegerField(help_text='The number of sheets included with the patent.', null=True)),
                ('withdrawn', models.BooleanField(help_text='Whether the patent has been withdrawn, in other words if it is still valid.')),
            ],
        ),
        migrations.CreateModel(
            name='PCTData',
            fields=[
                ('patent', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='pct_date', serialize=False, to='main.patent')),
                ('published_or_filled_date', models.DateField(help_text='The date when the patent was published or filed in the PCT database.')),
                ('application_number', models.CharField(help_text='The application number of the patent in the PCT database.', max_length=100)),
                ('filled_countrypy', models.CharField(help_text='The country where the patent was filed in the PCT database.', max_length=100)),
                ('granted', models.BooleanField(help_text="Whether the patent is granted or it's just an application.")),
            ],
        ),
        migrations.CreateModel(
            name='PatentCitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('citation_date', models.DateField(help_text='The date when the patent was cited.')),
                ('record_name', models.CharField(blank=True, help_text='The name of the record.', max_length=100, null=True)),
                ('cited_patent_number', models.CharField(help_text="The application number of the cited patent if it's not in the database.", max_length=100, null=True)),
                ('cited_patent_country', models.CharField(help_text="The country of the cited patent if it's not in the database.", max_length=100, null=True)),
                ('cited_patent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cited_by', to='main.patent')),
                ('citing_patent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='citations', to='main.patent')),
            ],
        ),
        migrations.CreateModel(
            name='Inventor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='The first name of the inventor.', max_length=100)),
                ('last_name', models.CharField(help_text='The last name of the inventor.', max_length=100)),
                ('male', models.BooleanField(help_text='Whether the inventor is male, if false is female, if null then no gender attributed.', null=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='inventors', to='main.location')),
                ('patent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='inventors', to='main.patent')),
            ],
        ),
        migrations.CreateModel(
            name='CPCSubclass',
            fields=[
                ('subclass', models.CharField(help_text="The subclass of the CPC classification. E.g 'A63B'", max_length=100, primary_key=True, serialize=False)),
                ('title', models.TextField(help_text="The title of the subclass. E.g 'apparatus for physical training, gymnastics, swimming, climbing, or fencing; ball games; training equipment'")),
                ('_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subclasses', to='main.cpcclass')),
            ],
        ),
        migrations.CreateModel(
            name='CPCGroup',
            fields=[
                ('group', models.CharField(help_text="The group of the CPC classification. E.g 'A63B71/146'", max_length=100, primary_key=True, serialize=False)),
                ('title', models.TextField(help_text="The title of the group. E.g 'Golf gloves'")),
                ('subclass', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='groups', to='main.cpcsubclass')),
            ],
        ),
        migrations.AddField(
            model_name='cpcclass',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='classes', to='main.cpcsection'),
        ),
        migrations.CreateModel(
            name='Assignee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='The first name of the assignee if the assignee is an individual.', max_length=100, null=True)),
                ('last_name', models.CharField(help_text='The last name of the assignee if the assignee is an individual.', max_length=100, null=True)),
                ('organization', models.CharField(help_text='The organization name if the assignee is an organization.', max_length=100, null=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assignees', to='main.location')),
                ('patent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assignees', to='main.patent')),
            ],
        ),
        migrations.CreateModel(
            name='PatentCPCGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpc_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='patents', to='main.cpcgroup')),
                ('patent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cpc_groups', to='main.patent')),
            ],
            options={
                'unique_together': {('patent', 'cpc_group')},
            },
        ),
    ]
